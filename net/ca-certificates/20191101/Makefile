
COMPONENT_TARGETS  = $(HARDWARE_PC32)
COMPONENT_TARGETS += $(HARDWARE_PC64)
COMPONENT_TARGETS += $(HARDWARE_CB1X)
COMPONENT_TARGETS += $(HARDWARE_CB2X)
COMPONENT_TARGETS += $(HARDWARE_CB3X)
COMPONENT_TARGETS += $(HARDWARE_ORANGE_PP2E)
COMPONENT_TARGETS += $(HARDWARE_NANOPI_NEO)
COMPONENT_TARGETS += $(HARDWARE_ORANGE_PP)
COMPONENT_TARGETS += $(HARDWARE_ORANGE_PL2)
COMPONENT_TARGETS += $(HARDWARE_WECHIP_TX6)
COMPONENT_TARGETS += $(HARDWARE_FFRK3288)
COMPONENT_TARGETS += $(HARDWARE_POIN2)
COMPONENT_TARGETS += $(HARDWARE_RK3328_CC)
COMPONENT_TARGETS += $(HARDWARE_KHADAS_EDGE)
COMPONENT_TARGETS += $(HARDWARE_M201)
COMPONENT_TARGETS += $(HARDWARE_MXV)
COMPONENT_TARGETS += $(HARDWARE_P201)
COMPONENT_TARGETS += $(HARDWARE_NEXBOX_A95X)
COMPONENT_TARGETS += $(HARDWARE_ODROID_C2)
COMPONENT_TARGETS += $(HARDWARE_P212)
COMPONENT_TARGETS += $(HARDWARE_KHADAS_VIM)
COMPONENT_TARGETS += $(HARDWARE_Q201)
COMPONENT_TARGETS += $(HARDWARE_ENYBOX_X2)
COMPONENT_TARGETS += $(HARDWARE_KHADAS_VIM2)
COMPONENT_TARGETS += $(HARDWARE_NIT6Q)
COMPONENT_TARGETS += $(HARDWARE_OKMX6DL_C)
COMPONENT_TARGETS += $(HARDWARE_OKMX6Q_C)
COMPONENT_TARGETS += $(HARDWARE_OMAP5UEVM)
COMPONENT_TARGETS += $(HARDWARE_DRA7XXEVM)
COMPONENT_TARGETS += $(HARDWARE_CI20)
COMPONENT_TARGETS += $(HARDWARE_BAIKAL_T1)
COMPONENT_TARGETS += $(HARDWARE_MBC4_PC)
COMPONENT_TARGETS += $(HARDWARE_S824L)
COMPONENT_TARGETS += $(HARDWARE_VESNIN)
COMPONENT_TARGETS += $(HARDWARE_S824L_LSB)
COMPONENT_TARGETS += $(HARDWARE_VESNIN_LSB)
COMPONENT_TARGETS += $(HARDWARE_TL2WK2)
COMPONENT_TARGETS += $(HARDWARE_TL2SV2)
COMPONENT_TARGETS += $(HARDWARE_TL2WK2_LSB)
COMPONENT_TARGETS += $(HARDWARE_TL2SV2_LSB)


NEED_ABS_PATH      = true
COMPONENT_IS_3PP   = true


include ../../../build-system/constants.mk


SOURCE_REQUIRES    = sources/packages/n/ca-certificates/mozilla
SOURCE_REQUIRES   += sources/packages/n/ca-certificates/debian

REQUIRES           = net/openssl/1.1.1d
REQUIRES          += app/dcron/4.5

# ======= __END_OF_REQUIRES__ =======


version            = 20191101
debian_version     = 20190110

mozilla_archive    = $(SRC_PACKAGE_PATH)/packages/n/ca-certificates/mozilla/mozilla-certs-$(version).tar.xz
tar_xz_archive     = $(SRC_PACKAGE_PATH)/packages/n/ca-certificates/debian/ca-certificates_$(debian_version).tar.xz
SRC_ARCHIVE        = $(tar_xz_archive)
SRC_DIR            = $(TARGET_BUILD_DIR)/ca-certificates-$(debian_version)
src_dir_name       = ca-certificates-$(debian_version)
src_done           = $(TARGET_BUILD_DIR)/.source-done

doc_dir_name       = ca-certificates-$(version)

PATCHES = PATCHES

build_target       = $(TARGET_BUILD_DIR)/.build_done
install_target     = $(TARGET_BUILD_DIR)/.install_done

docs_dir           = $(CURDIR)/docs
licenses_dir       = $(CURDIR)/licenses
scripts_dir        = $(CURDIR)/scripts


####### Targets

PKG_GROUP = net

#
# *PKG_NAME & *PKG_VERSION shouldn't be a reference to value.
#
CACERTS_PKG_NAME                = ca-certificates
CACERTS_PKG_VERSION             = 20191101
CACERTS_PKG_ARCH                = $(TOOLCHAIN)
CACERTS_PKG_DISTRO_NAME         = $(DISTRO_NAME)
CACERTS_PKG_DISTRO_VERSION      = $(DISTRO_VERSION)
CACERTS_PKG_GROUP               = $(PKG_GROUP)
###                              |---handy-ruler-------------------------------|
CACERTS_PKG_SHORT_DESCRIPTION   = PEM Files of CA Certificates
CACERTS_PKG_URL                 = $(BUG_URL)
CACERTS_PKG_LICENSE             = GPLv2
CACERTS_PKG_DESCRIPTION_FILE    = $(TARGET_BUILD_DIR)/$(CACERTS_PKG_NAME)-pkg-description
CACERTS_PKG_DESCRIPTION_FILE_IN = $(CACERTS_PKG_NAME)-pkg-description.in
CACERTS_PKG_INSTALL_SCRIPT      = $(CACERTS_PKG_NAME)-pkg-install.sh

CACERTS_PKG      = $(CURDIR)/$(TARGET_BUILD_DIR)/$(CACERTS_PKG_NAME)-package

pkg_basename     = $(CACERTS_PKG_NAME)-$(CACERTS_PKG_VERSION)-$(CACERTS_PKG_ARCH)-$(CACERTS_PKG_DISTRO_NAME)-$(CACERTS_PKG_DISTRO_VERSION)

pkg_archive      = $(TARGET_BUILD_DIR)/$(PKG_GROUP)/$(pkg_basename).$(pkg_arch_suffix)
pkg_certificate  = $(call cert-name,$(pkg_archive))
pkg_signature    = $(call sign-name,$(pkg_archive))
pkg_description  = $(call desc-name,$(pkg_archive))
products         = $(call pkg-files,$(pkg_archive))

BUILD_TARGETS    = $(build_target)
BUILD_TARGETS   += $(install_target)

PRODUCT_TARGETS  = $(products)

ROOTFS_TARGETS   = $(pkg_archive)


include ../../../build-system/core.mk


####### Dependencies

$(src_done): $(SRC_ARCHIVE) $(PATCHES_DEP)
	$(UNPACK_SRC_ARCHIVE)
	@echo "Expanding $(mozilla_archive)"
	@tar xJf $(mozilla_archive) -C $(SRC_DIR)/mozilla
	$(APPLY_PATCHES)
	@touch $@

$(build_target): $(src_done)
	@cd $(SRC_DIR) && $(MAKE)
	@touch $@

$(install_target): $(build_target)
	@mkdir -p $(CACERTS_PKG)
	@cd $(SRC_DIR) && $(MAKE) install DESTDIR=$(CACERTS_PKG)
	@mkdir -p $(CACERTS_PKG)/etc/ca-certificates/update.d
	@printf "#\n# Automatically generated by ca-certificates-$(version):\n#\n" \
	  > $(CACERTS_PKG)/etc/ca-certificates.conf.new
	@( cd $(CACERTS_PKG)/usr/share/ca-certificates ; \
	   find . -name '*.crt' | sort | cut -b3- ) \
	   >> $(CACERTS_PKG)/etc/ca-certificates.conf.new
	@mkdir -p $(CACERTS_PKG)/var/log/$(DISTRO_NAME)/setup
	@cat $(scripts_dir)/setup.11.cacerts > $(CACERTS_PKG)/var/log/$(DISTRO_NAME)/setup/setup.11.cacerts
	@chmod 755 $(CACERTS_PKG)/var/log/$(DISTRO_NAME)/setup/setup.11.cacerts
	# ======= Install Documentation =======
	@mkdir -p $(CACERTS_PKG)/usr/doc/$(doc_dir_name)
	@mkdir -p $(CACERTS_PKG)/usr/share/doc/$(doc_dir_name)
	@( cd $(licenses_dir) ; \
	   cp -a LICENSE* $(CACERTS_PKG)/usr/doc/$(doc_dir_name) ; \
	   cp -a LICENSE* $(CACERTS_PKG)/usr/share/doc/$(doc_dir_name) ; \
	 )
	@( cd $(docs_dir) ; \
	   cp -a README* $(CACERTS_PKG)/usr/share/doc/$(doc_dir_name) ; \
	 )
	# ======= Install the same to $(TARGET_DEST_DIR) =======
	$(call install-into-devenv, $(CACERTS_PKG))
	@touch $@

$(CACERTS_PKG_DESCRIPTION_FILE): $(CACERTS_PKG_DESCRIPTION_FILE_IN)
	@cat $< | $(SED) -e "s/@VERSION@/$(version)/g" > $@

$(pkg_certificate) : $(pkg_archive) ;
$(pkg_signature)   : $(pkg_archive) ;
$(pkg_description) : $(pkg_archive) ;

$(pkg_archive): $(install_target) $(CACERTS_PKG_DESCRIPTION_FILE) $(CACERTS_PKG_INSTALL_SCRIPT)
	@cp $(CACERTS_PKG_DESCRIPTION_FILE) $(CACERTS_PKG)/.DESCRIPTION
	@cp $(CACERTS_PKG_INSTALL_SCRIPT) $(CACERTS_PKG)/.INSTALL
	@$(BUILD_PKG_REQUIRES) $(CACERTS_PKG)/.REQUIRES
	@echo "pkgname=$(CACERTS_PKG_NAME)"                            >  $(CACERTS_PKG)/.PKGINFO ; \
	 echo "pkgver=$(CACERTS_PKG_VERSION)"                          >> $(CACERTS_PKG)/.PKGINFO ; \
	 echo "arch=$(CACERTS_PKG_ARCH)"                               >> $(CACERTS_PKG)/.PKGINFO ; \
	 echo "distroname=$(CACERTS_PKG_DISTRO_NAME)"                  >> $(CACERTS_PKG)/.PKGINFO ; \
	 echo "distrover=$(CACERTS_PKG_DISTRO_VERSION)"                >> $(CACERTS_PKG)/.PKGINFO ; \
	 echo "group=$(CACERTS_PKG_GROUP)"                             >> $(CACERTS_PKG)/.PKGINFO ; \
	 echo "short_description=\"$(CACERTS_PKG_SHORT_DESCRIPTION)\"" >> $(CACERTS_PKG)/.PKGINFO ; \
	 echo "url=$(CACERTS_PKG_URL)"                                 >> $(CACERTS_PKG)/.PKGINFO ; \
	 echo "license=$(CACERTS_PKG_LICENSE)"                         >> $(CACERTS_PKG)/.PKGINFO
	@$(PSEUDO) sh -c "cd $(CACERTS_PKG) && chown -R root:root . && $(MAKE_PACKAGE) -J --linkadd=yes $(GNUPG_OPTIONS) -m -d .. ."
