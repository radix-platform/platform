diff -Nuar src.old/header.c src/header.c
--- src.old/header.c	Fri Oct  6 02:36:03 2000
+++ src/header.c	Fri Jul 19 16:46:41 2002
@@ -82,6 +82,7 @@
 	register int    i;
 
 #ifdef MULTIBYTE_CHAR
+	if (multibyte_mode == TRUE) {
 	for (i = 0; i < len; i++) {
 		if (MULTIBYTE_FIRST_P(name[i]) &&
 		    MULTIBYTE_SECOND_P(name[i + 1]))
@@ -91,6 +92,14 @@
 		else if (!noconvertcase && isupper(name[i]))
 			name[i] = tolower(name[i]);
 	}
+	} else {
+	for (i = 0; i < len; i++) {
+		if (name[i] == '\\')
+			name[i] = '/';
+		else if (!noconvertcase && isupper(name[i]))
+			name[i] = tolower(name[i]);
+	}
+	}
 #else
 	for (i = 0; i < len; i++) {
 		if (name[i] == '\\')
@@ -111,6 +120,7 @@
 	boolean         lower_case_used = FALSE;
 
 #ifdef MULTIBYTE_CHAR
+	if (multibyte_mode == TRUE) {
 	for (i = 0; i < len; i++) {
 		if (MULTIBYTE_FIRST_P(name[i]) &&
 		    MULTIBYTE_SECOND_P(name[i + 1]))
@@ -128,6 +138,19 @@
 			name[i] = '/';
 		else if (!noconvertcase && !lower_case_used && isupper(name[i]))
 			name[i] = tolower(name[i]);
+	}
+	} else {
+	for (i = 0; i < len; i++)
+		if (islower(name[i])) {
+			lower_case_used = TRUE;
+			break;
+		}
+	for (i = 0; i < len; i++) {
+		if (name[i] == '\\')
+			name[i] = '/';
+		else if (!noconvertcase && !lower_case_used && isupper(name[i]))
+			name[i] = tolower(name[i]);
+	}
 	}
 #else
 	for (i = 0; i < len; i++)
diff -Nuar src.old/lha.h src/lha.h
--- src.old/lha.h	Fri Jul 19 17:22:13 2002
+++ src/lha.h	Fri Jul 19 17:18:05 2002
@@ -101,6 +101,9 @@
 #ifdef EUC
 EXTERN boolean	euc_mode;
 #endif
+#ifdef MULTIBYTE_CHAR
+EXTERN boolean	multibyte_mode;
+#endif
 
 /* list command flags */
 EXTERN boolean  verbose_listing;
diff -Nuar src.old/lharc.c src/lharc.c
--- src.old/lharc.c	Fri Oct  6 02:33:34 2000
+++ src/lharc.c	Fri Jul 19 16:56:03 2002
@@ -101,6 +101,10 @@
 	euc_mode		= FALSE;
 #endif
 
+#ifdef MULTIBYTE_CHAR
+	multibyte_mode		= FALSE;
+#endif
+
 /* view command flags */
 	verbose_listing = FALSE;
 
@@ -177,6 +181,11 @@
                                      e  TEXT code convert from/to EUC\n\
 ");
 #endif
+#ifdef MULTIBYTE_CHAR
+	fprintf(stderr, "\
+                                     y  filename multibyte convert\n\
+");
+#endif
 	exit(1);
 }
 
@@ -308,6 +317,11 @@
 		case 'e':
 			text_mode = TRUE;
 			euc_mode = TRUE;
+			break;
+#endif
+#ifdef MULTIBYTE_CHAR
+		case 'y':
+			multibyte_mode = TRUE;
 			break;
 #endif
 		case 'n':
diff -Nuar src.old/util.c src/util.c
--- src.old/util.c	Wed Oct  4 23:57:38 2000
+++ src/util.c	Fri Jul 19 16:49:23 2002
@@ -113,18 +113,29 @@
 #endif
 	for (p = path; (c = *p) != 0; p++) {
 #ifdef MULTIBYTE_CHAR
-		if (kflg) {
-			kflg = 0;
+		if (multibyte_mode == TRUE) {
+			if (kflg) {
+				kflg = 0;
+			} else if (MULTIBYTE_FIRST_P(c)) {
+				kflg = 1;
+			} else {
+				if (c == '\\' || c == DELIM || c == DELIM2) {
+					*p = delim;
+					path = p + 1;
+				}
+			}
+		} else {
+			if (c == '\\' || c == DELIM || c == DELIM2) {
+				*p = delim;
+				path = p + 1;
+			}
 		}
-		else if (MULTIBYTE_FIRST_P(c)) {
-			kflg = 1;
-		}
-		else
-#endif
+#else
 		if (c == '\\' || c == DELIM || c == DELIM2) {
 			*p = delim;
 			path = p + 1;
 		}
+#endif
 	}
 	return path;
 }
