#!/bin/sh

TAR=tar

# program name:
program=`basename $0`

#  1 = tar returned error code (or caannot get .REQUIRES file)
#  2 = failed read package info
#  4 = not a file
# 16 = root path has not specified arter --root option
# 17 = exit if called with no arguments
# 24 = {Setup | Package} database directory doesn't exist.
# 92 = Cannot create '/tmp/...' directory
EXITSTATUS=0

CWD=`pwd`

TMP=$(mktemp -d /tmp/XXXXXXXX) || { echo "Cannot create '/tmp/...' directory" ; exit 92; }
trap "rm -rf $TMP" EXIT


usage() {
 cat << EOF

Usage: $program [options] {package_tarball | instll_log_file}

$program is used to determine which packages are required for this package:
   $program /pkgsdir/_kxLibc-1.0.4-x86_64-slamd64-12.2.tgz  1>humanreadable 2>formatted
   $program /SETUP_DB_PATH/packages/_kxLibc-1.0.4-x86_64-slamd64-12.2

options:
   --root /dest - root path to finding packaged database
                  Note that 'path' should be absolute, like '/dest';

stderr (format):
   pkgname:reqver:ERRCODE
where:
   pkgname - required package name;
   reqver  - required version;
   ERRCODE - {OLD | NOTINSTALLED}
                    ------------
                    NOTINSTALLED - the required package is not installed,
              ---
              OLD                - the required package is installed but too old.

stdout is human readable.

EOF
}


tarball_requires() {
  zcat $1 | $TAR -xvf - ".REQUIRES" -O  1> .REQUIRES  2> /dev/null
  if [ ! "$?" = "0" ]; then
    echo "ERROR: Cannot extract package requires from $1"
    EXITSTATUS=1
    exit $EXITSTATUS
  fi
}


#
# Parse options:
#
while [ 0 ]; do
  if [ "$1" = "-h" -o "$1" = "--help" ]; then
    usage
    exit 0
  elif [ "$1" = "--root" ]; then
    if [ "$2" = "" ]; then
      usage
      echo "ERROR: Target root path has not specified. Check --root option."
      EXITSTATUS=16
      exit $EXITSTATUS
    fi
    TARGET_ROOT_PATH="$2"
    shift 2
  else
    break
  fi
done

#
# usage(), exit if called with no arguments:
#
if [ $# = 0 ]; then
  usage
  echo "ERROR: arguments were not specified. Check options."
  EXITSTATUS=17
  exit $EXITSTATUS
fi

if [ "$TARGET_ROOT_PATH" = "" ]; then
  TARGET_ROOT_PATH="/"
else
  TARGET_ROOT_PATH="`echo "$TARGET_ROOT_PATH" | sed -e "s/\/$//"`/"
fi

SETUP_DB_PATH=${TARGET_ROOT_PATH}var/log/_kxLab
if [ ! -d $SETUP_DB_PATH ]; then
  echo "ERROR: Setup database directory doesn't exist."
  EXITSTATUS=24
  exit $EXITSTATUS
fi

PKG_DB_PATH=$SETUP_DB_PATH/packages
if [ ! -d $PKG_DB_PATH ]; then
  echo "ERROR: Packages database directory doesn't exist."
  EXITSTATUS=24
  exit $EXITSTATUS
fi


################################################################
# Main loop:
#
PKGFILE=$1

# Simple package integrity check:
if [ ! -f $PKGFILE ]; then
  EXITSTATUS=4
  echo "ERROR: $PKGFILE: is not a regular file"
  exit $EXITSTATUS
fi

pkgfile_name="`basename $PKGFILE`"
pkgfile_noext_name="`basename $PKGFILE .tgz`"
pkgfile_src_dir="`dirname $PKGFILE`"

if [ "$pkgfile_name" = "$pkgfile_noext_name" ]; then
  logfile="$PKGFILE"
  tarball=""
else
  logfile=""
  tarball="$PKGFILE"
fi

# getting .REQUIRES file:
if [ ! "$logfile" = "" ]; then
  pkginfo requires $logfile
  if [ ! -f $CWD/.REQUIRES -o ! -s $CWD/.REQUIRES ]; then
    rm -f $CWD/.REQUIRES
    exit 1
  fi
elif [ ! "$tarball" = "" ]; then
  tarball_requires $tarball
  if [ ! -f $CWD/.REQUIRES -o ! -s $CWD/.REQUIRES ]; then
    rm -f $CWD/.REQUIRES
    exit 1
  fi
fi

echo ""
echo "Requires of `basename $PKGFILE`:"
echo ""

# read lines:
LINENUMS=`sed -n "$=" $CWD/.REQUIRES | tr '\n' '\0'`
LINENUM_REQ=1
while [ "$LINENUM_REQ" -le "$LINENUMS" ]; do
  LINE="`sed -n "$LINENUM_REQ p" $CWD/.REQUIRES | tr '\n' '\0'`"
  let LINENUM_REQ+=1
  reqname=`echo "$LINE" | cut -f 1 -d '='`
  reqver=`echo "$LINE" | cut -f 2 -d '='`
  if [ ! -z "$reqname" ]; then
    if [ "`find $PKG_DB_PATH -type f -name "$reqname-*"`" = "" ]; then
      echo "$reqname:$reqver:NOTINSTALLED" >&2
      echo "Package '$reqname' version: $reqver: Is not installed."
    fi
    for reqfile in `find $PKG_DB_PATH -type f -name "$reqname-*" | sort -r` ; do
      pkginfo pkginfo $reqfile
      if [ -f "$CWD/.PKGINFO" ]; then
        unset pkgname
        unset pkgver

        . $CWD/.PKGINFO

        if [ "$pkgver" == "$reqver" -o "$pkgver" \> "$reqver" ]; then
          rm -f $CWD/.PKGINFO
          break
        elif [ "$pkgver" \< "$reqver" ]; then
          echo "$pkgname:$reqver:OLD" >&2
          echo "Package '$pkgname' version: $reqver: Too old."
        fi
        rm -f $CWD/.PKGINFO
      else
        EXITSTATUS=2
        echo "$pkgname:$reqver:NOTINSTALLED" >&2
        echo "Package '$pkgname' version: $reqver: Is not installed."
      fi
    done
  fi
done
rm -f $CWD/.REQUIRES
#
# End of Main loop.
################################################################
echo ""

exit $EXITSTATUS

