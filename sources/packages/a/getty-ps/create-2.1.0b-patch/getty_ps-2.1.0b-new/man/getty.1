.\" +----------
.\" |	$Id: getty.m4,v 2.0 90/09/19 20:11:33 paul Rel $
.\" |
.\" |	GETTY/UUGETTY man page.
.\" |
.\" |	Copyright 1989,1990 by Paul Sutcliffe Jr.
.\" |	Portions copyright 2000,2002 by Christine S. Jamison
.\" |
.\" |	Permission is hereby granted to copy, reproduce, redistribute,
.\" |	or otherwise use this software as long as: there is no monetary
.\" |	profit gained specifically from the use or reproduction of this
.\" |	software; it is not sold, rented, traded or otherwise marketed;
.\" |	and this copyright notice is included prominently in any copy
.\" |	made.
.\" |
.\" |	The authors make no claims as to the fitness or correctness of
.\" |	this software for any use whatsoever, and it is provided as is. 
.\" |	Any use of this software is at the user's own risk.
.\" |
.\"
.TH GETTY 1m "12-Sep-02" "Release 2.1.0"
.SH NAME
getty \- sets terminal mode, speed, and conditions port
.SH SYNOPSIS
.B /sbin/getty
[\-d
.I defaults_file
] [\-C
.I connect_script
] [\-D
.I debug_value
] [\-R] [\-a] [\-h] [\-r
.I delay
] [\-t
.I timeout
] [\-w
.I waitfor
]
.B port
.I [speed [type [lined]]]
.br
.B /sbin/getty \-c
.I gettydefs_file
.SH DESCRIPTION
.I Getty
is the second in the series of programs (
.IR init (1m),
.IR getty (1m),
.IR login (1m),
and shell [bash, sh, or others]), used by the system to connect the user
to the system (i.e., allow the user to login and thus gain access to
system resources).  Note that
.IR telnet
has it's own login process and does not use
.IR getty.
.IR Getty
is invoked by
.IR init (1m)
to:
.br
.TP 3
1.
Open the tty port (usually a serial port) and condition the port (by
setting its modes);
.TP
2.
Print the login prompt, and get the user's name;
.TP
3.
Initiate a login process for the user (which prompts the user for the
password and validates it).
.P
.I Getty
has many extremely convenient features, for both direct connect devices,
as well as modems, such as:
.IP 1
Conditioning the port is done by changing the stty attributes associated
with that port.  Any attribute settable with stty can be used to condition
the port, including enabling or disabling modem controls, hardware
flow-control or software flow-control, and setting 7 or 8 data bits and
odd, even, mark or space parity;
.IP 2
Allows a multiple-use port for inbound and/or outbound connections - data
and fax;
.IP 3
Allows extensive prompt substitution, for custom login banners and login
prompts.
.IP 4
Auto-baud detects under a variety of conditions.
.IP 5
Optionally uses an alternate
.B /etc/issue
file, or does not issue a login banner;
.IP 6
Optionally uses the
.B /etc/ttytype
file, or the tty type can be set from the command line (the former is a
nice feature if you want others to be able to change terminal types, but
don't want to give them access to
.BR /etc/inittab
);
.IP 7
Optionally invokes an alternate login program, instead of the default
.BR /bin/login
;
.IP 8
Supports ringback, if desired.
.P
The actual procedure that
.I getty
uses is as follows:
.P
Initially,
.I getty
parses its command line.  If no errors are found, and the tty type from 
the command line is set to "unknown" (the default value), or not set, 
.I getty
checks for the tty type in
.BR /etc/ttytype
if the program was compiled with 
.I TTYTYPE
defined.  If a tty type is found, either on the command line or in the 
.BR /etc/ttytype
file, then it is placed into the TERM environment variable.  Next, 
.I getty
scans the defaults file, normally
.BR /etc/default/getty,
to determine certain runtime values (/etc/conf.getty if compiled with
FSSTND option).  The values in the defaults file
(whose compiled\-in name can be altered with the optional
.B \-d
.I defaults_file
argument) take precedence to those on the command line.
.I Getty
then opens the
.I port
for reading and writing, and disables stdio buffering.
If an initialization was specified, it is performed (see LINE
INITIALIZATION).
.PP
After the initialization, the port is closed and reopened.  This
time, however, the port is opened in blocking mode so that the
device is not tied up.  Detection of the carrier signal will allow
the port to be opened.
.PP
Next,
.I getty
displays the issue (or login banner, usually from
.BR /etc/issue )
if configured to do so, and login prompt.  Finally,
.I getty
reads the user's login name and invokes
.IR login (1m)
(or another program, if configured) with the user's name as an argument.
While reading the name,
.I getty
attempts to adapt the system to the speed of the terminal being used,
and also sets certain terminal parameters (see
.IR termios (3))
to conform with the user's login procedure.
.SH "COMMAND ARGUMENTS"
The tty device used by
.I getty
is determined by the
.I port
argument.
.I Getty
uses the string
.BI /dev/ port
as the name of the device to attach itself to.

The
.I speed
argument, if present, is used as a label to find an entry in the
.B /etc/gettydefs
file (see
.IR gettydefs (4)).
This entry defines to
.I getty
the initial speed (baud rate) and tty settings, the login prompt to be
used, the final speed and tty settings, and a pointer to another entry
to try should the user indicate that the speed is not correct.  This
is indicated by sending a
.I <break>
character (actually sequence).  Under certain conditions, a
carriage\-return will perform the same function.  This is usually the
case when getty is set to a higher speed than the modem or terminal.
.I Getty
scans the gettydefs file sequentially looking for a matching entry.
If no
.I speed
was given or the entry
cannot be found, the first entry in the
.B /etc/gettydefs
file is used as a default.  In the event that the gettydefs file cannot be
accessed, there is a compiled\-in default entry that is used.

The optional
.I type
argument is a string which identifies the type of terminal attached to
the port.  This
.I type
should be a valid terminal name listed in the
.BR termcap (7)
database.
.I Getty
uses this value to determine how to clear the video display.  It also sets
the environment variable TERM to this value, which is exported thru 
.IR login (1m)
to the shell.  If this argument is not present and getty was compiled
with TTYTYPE enabled, then the terminal type is looked up in the tty type
file, usually named
.B /etc/ttytype
and the corresponding
.BI type
from there is used.

The
.I lined
argument is a string describing the line discipline to use on the
port.  The default is
.BR LDISC0 .

The name of the defaults file can be
changed by specifying
.B \-d
.I defaults_file
on the command line.  If
.I defaults_file
begins with a slash, it is assumed to be a complete pathname of the
defaults file to be used.  Otherwise, it is assumed to be a regular
filename, causing
.I getty
to use the pathname
.BI /etc/default/defaults_file.
or
.BI /etc/conf.defaults_file
if compiled with FSSTND compliance.

Using
.B \-C
.I connect_script
on the command line (or using
.B CONNECT=string
in the defaults file) will cause
.I getty
to do a connection chat sequence.

Specifying the
.B \-D
.I debug_value
switch on the command line (or using
.B DEBUG=debug_value
in the defaults file) will cause
.I getty
to log it's progress in the log file specified at compile time, or the
syslog file, if none was specified.

Using the
.B \-R
switch on the command line (or using
.B RINGBACK=YES
in the defaults file) will cause
.I getty
to use ringback mode on this port.

The switch
.B \-a
.I Init_Device
specifed on the command line (or using
.B INITLINE=Init_device
in the defaults file) will cause
.I getty
to open the init_device and do the INIT script and WAITCHAR on this device
instead of the port specified on the command line.  

Unless
.I getty
is invoked with the
.B \-h
flag (or
.B HANGUP=NO
is specified in the defaults file), it will force a hangup on the port
by setting the speed to zero.

Giving
.B \-r
.I delay
on the command line (or using
.B WAITCHAR=YES
and
.BI DELAY= delay
in the defaults file) will cause
.I getty
to wait for a single character from the port, and then to wait
.I delay
seconds before continuing.  If no delay is desired, use
.BR \-r0 .

Entering an argument of
.B \-t
.I timeout
on the command line (or using
.B TIMEOUT=number
in the defaults file) will cause
.I getty
to exit (which
.I init
should then respawn), if the login is not completed within timeout seconds
(after the login name is entered). This option behaves differently for
.I getty
and
.I uugetty.
If
.I getty
is used, the counting will start after single input from the user has been
detected, whileas with
.I uugetty,
the counting will start immediately after
.IR login (1m)
has been spawned, no matter the input from the user.

Giving
.B \-w
.I waitfor
on the command line (or using
.BI WAITFOR= waitfor
in the defaults file) will cause
.I getty
to wait for the specified string of characters from the port
before continuing.
.SH "GENERAL OPERATION"
As mentioned,
.I getty
displays the login prompt and then reads the user's login name.  If a
null character is received, it is assumed to be the result of the user
pressing the
.I <break>
key or the carriage\-return key to indicate the speed is wrong.  This
causes
.I getty
to locate the next
.I speed
in the series (defined in /etc/gettydefs).
.PP
The user's name is expected to be terminated by a new\-line or
carriage\-return character.  A carriage\-return results in the system
being set to map those to new\-lines (see
.IR ioctl (2)).
.PP
The user's name is scanned to see if it contains only upper\-case
characters.  If so,
the system is set to map any future upper\-case characters into
lower\-case.  Note that on Linux, the shell /bin/sh does not process this
correctly.
.PP
A check option is provided for testing the gettydefs file.  When
.I getty
is invoked with the
.BI \-c gettydefs
option, it scans the named
.I gettydefs
file and prints out (to the standard output) the values it sees.  If
any parsing errors occur (due to errors in the syntax of the gettydefs
file), they are reported.
.SH "DEFAULTS FILE"
During its startup,
.I getty
looks for the file
.BI /etc/default/getty.port,
(or, if it cannot find that file, then
.BR /etc/default/getty ),
and if found, reads the contents for lines of the form

.in +.5i
NAME=\fIvalue\fR
.in -.5i

This allows getty to have certain features configurable at runtime,
without recompiling.  The recognized NAME strings, and their
corresponding values, follows:
.TP 6
SYSTEM=\fIname\fR
Sets the nodename value (displayed by
.B @S
\-\- see PROMPT SUBSTITUTIONS) to
.IR name .
The default is the
.I nodename
value returned by the
.IR uname (3)
call.  
.TP
VERSION=\fIstring\fR
Sets the value that is displayed by the
.B @V
parameter (see PROMPT SUBSTITUTIONS) to
.I string.
If
.I string
begins with a '/' character, it is assumed to be the full pathname of a
text file, and
.B @V
is set to be the contents of the first line in that file (line has to be
terminated by newline character or by end of file).
.br
The default is /proc/version.
.TP
LOGIN=\fIname\fR
Sets the name of the login program to
.I name.
The default is
.B /bin/login
(see
.IR login (1m)).
If used,
.I name
must be the full pathname of the program that
.I getty
will execute instead of
.BR /bin/login .
Note that this program is called, as is
.BR /bin/login ,
the with the user's name as its only argument.
.TP
INIT=\fIstring\fR
If defined,
.I string
is an expect/send sequence that is used to initialize the port before
.I getty
attempts to use it.  This string is in a form resembling that used in
the
.I L.sys
file of
.IR uucp (1).
For more details, see LINE INITIALIZATION.  By default, no
initialization is done.
.TP
ISSUE=\fIstring\fR
During startup,
.I getty
defaults to displaying, as an issue or login banner, the contents of
the
.B /etc/issue
file.  If ISSUE is defined to a
.I string,
that string is displayed instead.  If
.I string
begins with a '/' character, it is assumed to be the full pathname of
a file, and that file is used instead of
.BR /etc/issue .
.TP
CLEAR=\fIvalue\fR
If
.I value
is
.BR NO ,
then 
.I getty
will not attempt to clear the video screen before displaying the
issue or login prompts.
The default is to clear the screen.
.TP
HANGUP=\fIvalue\fR
If
.I value
is
.BR NO ,
then
.I getty
will NOT hangup the port during its startup.  This is analogus to
giving the
.B \-h
argument on the command line.
.TP
WAITCHAR=\fIvalue\fR
If
.I value
is
.BR YES ,
then
.I getty
will wait for a single character from it's port before continuing.
This is useful for modem connections where the modem has CD forced
high at all times, to keep getty from endlessly chatting with the
modem.
.TP
DELAY=\fIseconds\fR
Used in conjunction with
.BR WAITCHAR ,
this adds a time delay of
.I seconds
after the character is accepted before allowing
.I getty
to continue.  Both
.B WAITCHAR
and
.B DELAY
have the same effect as specifying
.BI \-r delay
on the command line.
If
.B WAITCHAR
is given without a
.BR DELAY ,
the result is equal to having said
.B \-r0
on the command line.
The default is to not wait for a character.
.TP
TIMEOUT=\fInumber\fR
As with the
.B \-t
.I timeout
command line argument, tells
.I getty
to exit if no user name is accepted before the
.I number
of seconds elapse after the login prompt is displayed.
With
.I getty,
the counting will start as soon as a single character
has been entered by the user, whileas with
.I uugetty,
the counting will start immediately after the login prompt
is displayed, no matter the input from the user.
.br
The default is to wait indefinitely for the user name.
.TP
CONNECT=\fIstring\fR
If defined,
.I string
should be an expect/send sequence (like that for INIT) to direct
.I getty
in establishing the connection.
.I String
may be defined as
.BR DEFAULT ,
which will substitute the built\-in string:

.in +.5i
.nf
CONNECT\\s\\A\\r\\n
.fi
.in -.5i

The \\A escape marks the place where the digits showing the speed
will be seen.  See CONNECTION AND AUTOBAUDING for more details.
The default is to not perform a connection chat sequence.
.TP
WAITFOR=\fIstring\fR
This parameter is similar to WAITCHAR, but defines a string of
characters to be waited for.
.I Getty
will wait until
.I string
is received before issuing the login prompt.
This parameter is best used when combined with CONNECT, as in
this example:

.in +.5i
.nf
WAITFOR=RING
CONNECT="" ATA\\r CONNECT\\s\\A
.fi
.in -.5i

This would cause
.I getty
to wait for the string
.BR RING ,
then expect nothing, send
.B ATA
followed by a carriage\-return, and then wait for a string such as
.BR "CONNECT 2400" ,
in which case,
.I getty
would set itself to 2400 baud.
The default is not to wait for any string of characters.
.TP
ALTLOCK=\fIport\fR
.I Uugetty
uses this parameter to lock an alternate device, in addition to the
one it is attached to.  This is for those systems that have two
different device names that refer to the same physical port; e.g.
/dev/tty1A vs. /dev/tty1a, where one uses modem control and the
other doesn't.  See the section on UUGETTY for more details.
The default is to have no alternate lockfile.
.TP
ALTLINE=\fIport\fR
.I Getty
uses this parameter to specify a different device to use for handling
modem initialization.  If the WAITFOR option is being used, WAITFOR
will be done on this port also.  This is necessary for systems that
exercise locking between two ports.
.TP
RINGBACK=\fIvalue\fR
If
.I value
is
.I YES
ringback callin is enabled.  This is used in conjunction with
.I WAITFOR
and
.I CONNECT
to negotiate incoming calls.  The default action is to connect only if
the line rings one to three times, is hung up, and is called back within
60 seconds of the first call.  
.I MINRBTIME
and
.I MAXRBTIME
specify the minimum and maximum time for the second call.
.I INTERRING
specifies the maximum time between two successive rings in the same call.
.I MINRINGS
and
.I MAXRINGS
specify the minimum and maximum number of rings for the first call.
.TP
SCHED=\fIrange1 range2 range3 ...\fR
.I Getty
uses this line to schedule times to allow logins.  Each range has the
form DOW:HR:MIN-DOW:HR:MIN.  DOW is the day of the week.  0 = Sunday,
1 = Monday, ... 6 = Saturday.  HR is the hour, and MIN is the minute.
If the current time falls into one of these ranges, the INIT sequence
(if any) is sent and
.I getty
continues to run until the off time.  Otherwise, the OFF sequence is sent,
and getty sleeps until the on time.
.TP
OFF=\fIstring\fR
This line is identical to the INIT line, except it is only sent when the
port is scheduled to be OFF.
.TP
FIDO=\fIstring\fR
This line specifies the path to the FidoNet mailer (usually ifcico).
Undefined by default.  When setting up a FidoNet mailer, you should
also set EMSI to \fIyes\fR.  When an incoming FidoNet call is received, the
string \fItsync\fR or \fIyoohoo\fR is passed to the FidoNet mailer
as the only command line option if two TSYNC or two YOOHOO sequences
are received.  If EMSI is set to \fIyes\fR, the entire EMSI string
(starting with the first asterisk, and up to but not including the 
final carraige return) is passed as the only command line option.
.TP
EMSI=\fIvalue\fR
If set to \fIyes\fR, scan the input for FidoNet EMSI sequences.
.SH "PROMPT SUBSTITUTIONS"
When
.I getty
is displaying
the issue or login banner (ususally
.BR /etc/issue ),
or
the
.I login\-prompt,
it recognizes several escape (quoted) characters.  When one of these
quoted characters is found, its value is substituted in the output
produced by
.I getty.
Recognized escape characters are:
.br
.TP 6
\\\\
Backslash (\\).
.TP
\\b
Backspace (^H).
.TP
\\c
Placed at the end of a string, this prevents a new\-line from
being displayed after the string.
.TP
\\f
Formfeed (^L).
.TP
\\n
New\-line (^J).
.TP
\\r
Carriage\-return (^M).
.TP
\\s
A single space (' ').
.TP
\\t
Horizontal tab (^I).
.TP
\\\fInnn\fR
Outputs the ASCII character whose decimal value is
.IR nnn .
If
.I nnn
begins with 0, the value is taken to be in octal.  If it begins
with 0x, the value is taken to be in hexidecimal.
.P
In addition, a single backslash at the end of a line causes the
immediately following new\-line to be ignored, allowing continuation
lines.
.PP
Also, certain
.BI "@" char
parameters are recognized.  Those parameters, and the value that is
substituted for them are:
.TP 6
@B
The current (evaluated at the time the
.B @B
is seen) baud rate.
.TP
@D
The current date, in MM/DD/YY .
.TP
@F
The Fully Qualified Domain Name (FQDN) of the system.
.TP
@L
The
.I port
(serial line) to which
.I getty
is attached.
.TP
@M
The architecture identifier of the machine ("i386", for example).
.TP
@O
The Operating System name of the system ("Linux", for example).
.TP
@R
The operating system release identifier of the system ("2.4.5", for example).
.TP
@S
The system node name.
.TP
@T
The current time, in HH:MM:SS (24-hour) .
.TP
@U
The number of currently signed\-on users.  This is a count of the
number of entries in the
.I /etc/utmp
file that have a non\-null ut_name field.
.TP
@V
The value of
.BR VERSION ,
as given in the defaults file.
.TP
@u
The value "1 user" or "<n> users", where <n> is the number of currently
signed\-on users.  <n> is computed like "@U", above.
.P
To display a single '@' character, use either '\\@' or '@@'.
.SH "LINE INITIALIZATION"
One of the greatest benefits (in the author's opinion, at least) is
the ability of
.I getty
to initialize its port before use.  This will most likely be done on
ports with modems, not terminals, although initializing terminals is
not out of the question.
.PP
Port initialization is performed just after the
.I port
is opened and prior to handling the WAITCHAR and/or WAITFOR options.
Initialization is accomplished by placing an

.in +.5i
INIT=\fIstring\fR
.in -.5i

line in the defaults file.
.I String
is a series of one or more fields in the form

.in +.5i
expect [ send [ expect [ send ] ] ... ]
.in -.5i

This  resembles the expect/send sequences used in the UUCP
.I L.sys
file, with the following exception:
A carriage return is NOT appended automatically to sequences that
are 'sent.'  If you want a carriage\-return sent, you must explicitly
show it, with '\\r'.
.PP
.I Getty
supports subfields in the expect field of the form

.in +.5i
expect[\-send\-expect]...
.in -.5i

as with UUCP.  All the escape characters (those beginning with a '\\'
character) listed in the PROMPT SUBSTITUTIONS section are valid in
the send and expect fields.
In addition, the following escape characters are recognized:
.br
.TP 6
\\p
Inserts a 1\-second delay.
.TP
\\d
Inserts a 2\-second delay.
.TP
\\K
Sends a .25\-second Break.
.TP
\\T\fInnn\fR
Modifies the default timeout (usually 30 seconds) to
the value indicated by
.IR nnn .
The value
.I nnn
may be decimal, octal, or hexidecimal; see the usage of
\fB\\\fInnn\fR in PROMPT SUBSTITUTIONS.
.P
Note that for these additional escape characters, no actual
character is sent.
.SH "CONNECTION AND AUTOBAUDING"
.I Getty
will perform a chat sequence establish a proper connection.
The best use of this feature is to look for the
.B CONNECT
message sent by a modem and set the port speed to the number given in that
message (e.g. CONNECT 2400).  Note that for modern modems, it makes much
more sense to leave the serial port at a fixed baud (normally the highest
supported by the modem), and have the modem data speed (i.e., the speed
over the phone line) vary.  That way, you are always assured of the maxumum
transfer rate.  (Because, the modems will connect at the highest common
baud rate, subject to phone line quality; if the serial port is faster,
then the flow control will regulate the data flow between the modems.)
.PP
The structure of the connect chat script is exactly the same as that
for the INIT script (see LINE INITIALIZATION), with the following
addition:
.br
.TP 6
\\A
Marks the spot where the baud rate will be seen.  This mark will
match any and all digits 0\-9 at that location in the script, and
set it's speed to that value, if possible.
.P
Autobauding, therefore, is enabled by placing the
.B \\A
mark in the chat script.  For example, the definition:

.in +.5i
CONNECT=CONNECT\\s\\A
.in -.5i

would match the string
.B "CONNECT 1200"
and cause
.I getty
to set it's baud rate to 1200, using the following steps:
.TP 3
1.
Having matched the value 1200,
.I getty
will attempt to find an entry with the label
.B 1200
in the
.B gettydefs
file.  If a matching gettydefs entry is found, those values are
used.  If there is no match, then
.TP
2.
The gettydefs values currently in use are modified to use the
matched speed (e.g. 1200).  However, if the matched speed
is invalid, then
.TP
3.
.I Getty
logs a warning message and resumes normal operation.  This
allows the practice of toggling through linked entries in the
gettydefs file to behave as expected.
.P
.SH UUGETTY
.I Uugetty
has identical behavior to
.I getty,
except that
.I uugetty
is designed to create and use the lock files maintained by the UUCP
family
.IR (uucp (1),
.IR cu (1)
and others).  This prevents two or more processes from having conficting
use of a tty port.
.br
.I Uugetty
also differs from
.I getty
by handling the -t parameter and TIMEOUT option.
.PP
When
.I uugetty
starts up, if it sees a lock file for the port it intends to use,
it will use the pid in the lock file to see if there is an active
process holding the lock.  If not,
.I uugetty
will remove the lock file and continue.  If a valid process is found,
.I uugetty
will sleep until that process releases the lock and then it will exit,
forcing
.IR init (1m)
to spawn a new
.I uugetty.
Once no conflicting process is found,
.I uugetty
grabs the
.I port
by creating the lock file itself before issuing the login prompt.
This prevents other processes from using the port.
.PP
.I Uugetty
will normally only lock the name of the port it is running on.  On
systems where there are two device names referring to the same port
(as is the case where one device uses modem control while the other
doesn't), place a line of the form

.in +.5i
ALTLOCK=\fIport\fR
.in -.5i

line in the defaults file.  For instance, if
.I uugetty
is on
.I /dev/tty1a,
and you want to have it lock
.I /dev/tty1A
also, use the line
.B ALTLOCK=tty1A
in the defaults file.  Note that on Linux (after kernel 2.0.0 or so), the
use of the non-modem port "cuax" is discouraged.  Uugetty is set up to work
with only the modem-control "ttySx" port, by exact use of permissions and
ownership of the port (owned by user UUCP), in conjunction with suid.
Other programs wishing to share a modem port with uugetty should work well
if they also are owned by uucp and have the suid bit set on their
executable (plus whatever additional permissions issues need resolving).
.PP
Note that uugetty will work not only with modems, but also with a direct
serial connection between two machines.  This would allow a fairly secure
file transfer channel between two machines.  I have acheived throughput in
excess of 115200 baud between two systems with a short serial cable (10
feet or so).
.PP
While waiting for carrier detect, 
.I Uugetty
will check for lockfiles every 30 seconds.  If lockfiles are found,
uugetty will exit, and init will respawn another
.I getty.
This allows the modem to be reinitialized after another process has
used the modem.
.SH FILES
.TP 16
/etc/default/getty[\fI.port\fR]
Contains the runtime configuration.  Note that
.I uugetty
uses /etc/default/uugetty[\fI.port\fR].
.TP
/etc/gettydefs
Contains speed and tty settings to be used by
.I getty.
.TP
/etc/ttytype
Contains TERM value to be passed to the shell (if not present on the
command line), associated by port ID.
.TP
/etc/issue
The default issue (or login banner), if any.
.TP
/bin/login
The default login program called after the user's name is entered.
.P
.SH "SEE ALSO"
init(1m),
login(1m),
uucp(1),
ioctl(2),
uname(3),
gettydefs(5),
issue(5),
utmp(5),
termios(3)
.SH AUTHORS
.nf
Getty_ps in its current magical form:
Christine Jamison  <getty-info@nwmagic.net>
.br

Original getty_ps:  
Paul Sutcliffe, Jr.  <paul@devon.lns.pa.us>
UUCP: ...!rutgers!devon!paul
.br

Autobauding routines adapted from code submitted by
Mark Keating <...!utzoo!censor!markk>

And numerous patches and assistance supplied by various helpful people!

